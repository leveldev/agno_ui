import streamlit as st
import time
import uuid

# --- –ö–ª–∞—Å—Å—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class Agent:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞."""
    def __init__(self, name, prompt, model, tools):
        self.id = str(uuid.uuid4())
        self.name = name
        self.prompt = prompt
        self.model = model
        self.tools = tools

    def simulate_work(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞."""
        time.sleep(1) # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        tools_used = f"—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {', '.join(self.tools)}" if self.tools else "–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
        return f"**{self.name} ({self.model}):**\n> {self.prompt}\n\n*–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ {tools_used}*"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë) ---
# st.session_state - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Streamlit –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
# –º–µ–∂–¥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
if "agents" not in st.session_state:
    st.session_state.agents = []
if "simulation_log" not in st.session_state:
    st.session_state.simulation_log = []

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Callbacks) ---
# –¢–µ–ø–µ—Ä—å –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å st.session_state

def add_agent():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ session_state."""
    name = st.session_state.agent_name_input
    prompt = st.session_state.agent_prompt_input

    if not name or not prompt:
        st.toast("üî¥ –ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.", icon="error")
        return

    new_agent = Agent(
        name,
        prompt,
        st.session_state.agent_model_input,
        st.session_state.agent_tools_input
    )
    st.session_state.agents.append(new_agent)
    st.toast(f"‚úÖ –ê–≥–µ–Ω—Ç '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", icon="success")
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    st.session_state.agent_name_input = ""
    st.session_state.agent_prompt_input = ""


def delete_agent(agent_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID."""
    agent_to_delete = next((agent for agent in st.session_state.agents if agent.id == agent_id), None)
    if agent_to_delete:
        st.session_state.agents.remove(agent_to_delete)
        st.toast(f"üóëÔ∏è –ê–≥–µ–Ω—Ç '{agent_to_delete.name}' —É–¥–∞–ª–µ–Ω.", icon="info")


def run_team_simulation():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."""
    selected_agent_names = st.session_state.team_multiselect
    if not selected_agent_names:
        st.toast("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.", icon="warning")
        return

    st.session_state.simulation_log.append("--- –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ ---")
    for name in selected_agent_names:
        agent = next((a for a in st.session_state.agents if a.name == name), None)
        if agent:
            with st.spinner(f"–ê–≥–µ–Ω—Ç {agent.name} –≤ —Ä–∞–±–æ—Ç–µ..."):
                result = agent.simulate_work()
            st.session_state.simulation_log.append(result)
    st.session_state.simulation_log.append("--- –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
    st.toast("üöÄ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", icon="üöÄ")


def clear_log():
    """–û—á–∏—â–∞–µ—Ç –ª–æ–≥ —Å–∏–º—É–ª—è—Ü–∏–∏."""
    st.session_state.simulation_log = []
    st.toast("üßπ –õ–æ–≥ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—á–∏—â–µ–Ω.", icon="info")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è UI ---
def agent_and_team_manager():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤–µ—Å—å UI."""
    st.set_page_config(page_title="–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–≥–µ–Ω—Ç–æ–≤", layout="wide")

    # --- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ ---
    with st.sidebar:
        st.header("–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `key`, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã —Å session_state
        st.text_input("–ò–º—è –∞–≥–µ–Ω—Ç–∞", key="agent_name_input")
        st.text_area("–ü—Ä–æ–º–ø—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)", key="agent_prompt_input", height=150)
        st.selectbox("–ú–æ–¥–µ–ª—å", ["gemini-1.5-pro", "gpt-4o", "claude-3-opus"], key="agent_model_input")
        st.multiselect("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", ["–ü–æ–∏—Å–∫", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"], key="agent_tools_input")

        st.button("–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", on_click=add_agent, type="primary", use_container_width=True)

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ ---
    st.title("ü§ñ –ú–µ–Ω–µ–¥–∂–µ—Ä –ê–≥–µ–Ω—Ç–æ–≤")

    tab1, tab2 = st.tabs(["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞–º–∏", "–°–∏–º—É–ª—è—Ü–∏—è –†–∞–±–æ—Ç—ã"])

    with tab1:
        st.subheader("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        if not st.session_state.agents:
            st.info("–ü–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å —Ñ–æ—Ä–º—ã —Å–ª–µ–≤–∞.", icon="üëà")
        else:
            cols = st.columns(3)
            for i, agent in enumerate(st.session_state.agents):
                with cols[i % 3]:
                    with st.container(border=True):
                        st.markdown(f"#### {agent.name}")
                        st.caption(f"–ú–æ–¥–µ–ª—å: {agent.model}")
                        tools_str = ", ".join(agent.tools) if agent.tools else "–ù–µ—Ç"
                        st.caption(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools_str}")
                        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç"):
                            st.text(agent.prompt)
                        st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_{agent.id}", on_click=delete_agent, args=[agent.id], use_container_width=True)

    with tab2:
        st.subheader("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã")
        if not st.session_state.agents:
            st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞–º–∏'.")
        else:
            agent_names = [agent.name for agent in st.session_state.agents]
            st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã", options=agent_names, key="team_multiselect")

            col1, col2 = st.columns(2)
            with col1:
                st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", on_click=run_team_simulation, use_container_width=True, type="primary")
            with col2:
                st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", on_click=clear_log, use_container_width=True)

            # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
            st.subheader("–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            with st.container(height=400, border=True):
                if not st.session_state.simulation_log:
                    st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤...")
                else:
                    for entry in reversed(st.session_state.simulation_log):
                        st.markdown(entry)
                        st.divider()

# --- –í–´–ó–û–í –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò ---
# –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Streamlit Cloud.
# –û–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
agent_and_team_manager()
