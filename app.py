import streamlit as st
import time
import uuid
import sqlite3
import json

DB_NAME = "agents.db"

# --- –ö–ª–∞—Å—Å—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class Agent:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞."""
    def __init__(self, name, prompt, model, tools, agent_id=None):
        self.id = agent_id if agent_id else str(uuid.uuid4())
        self.name = name
        self.prompt = prompt
        self.model = model
        self.tools = tools

    def simulate_work(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞."""
        time.sleep(1) # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        tools_used = f"—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {', '.join(self.tools)}" if self.tools else "–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
        return f"**{self.name} ({self.model}):**\n> {self.prompt}\n\n*–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ {tools_used}*"

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite ---

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS agents (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            prompt TEXT NOT NULL,
            model TEXT NOT NULL,
            tools TEXT
        )
    """)
    conn.commit()
    conn.close()

def load_agents_from_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, prompt, model, tools FROM agents")
    agents = []
    for row in cursor.fetchall():
        tools_list = json.loads(row[4]) if row[4] else []
        agents.append(Agent(agent_id=row[0], name=row[1], prompt=row[2], model=row[3], tools=tools_list))
    conn.close()
    return agents

def save_agent_to_db(agent):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    tools_json = json.dumps(agent.tools)
    cursor.execute("INSERT INTO agents (id, name, prompt, model, tools) VALUES (?, ?, ?, ?, ?)",
                   (agent.id, agent.name, agent.prompt, agent.model, tools_json))
    conn.commit()
    conn.close()

def delete_agent_from_db(agent_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ ID."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM agents WHERE id = ?", (agent_id,))
    conn.commit()
    conn.close()


# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Callbacks) ---

def add_agent():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ session_state –∏ –≤ –ë–î."""
    name = st.session_state.agent_name_input
    prompt = st.session_state.agent_prompt_input

    if not name or not prompt:
        st.toast("üî¥ –ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.", icon="error")
        return

    new_agent = Agent(
        name,
        prompt,
        st.session_state.agent_model_input,
        st.session_state.agent_tools_input
    )
    st.session_state.agents.append(new_agent)
    save_agent_to_db(new_agent) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    st.toast(f"‚úÖ –ê–≥–µ–Ω—Ç '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", icon="success")
    st.session_state.agent_name_input = ""
    st.session_state.agent_prompt_input = ""

def delete_agent(agent_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∏–∑ session_state –∏ –∏–∑ –ë–î."""
    agent_to_delete = next((agent for agent in st.session_state.agents if agent.id == agent_id), None)
    if agent_to_delete:
        st.session_state.agents.remove(agent_to_delete)
        delete_agent_from_db(agent_id) # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        st.toast(f"üóëÔ∏è –ê–≥–µ–Ω—Ç '{agent_to_delete.name}' —É–¥–∞–ª–µ–Ω.", icon="info")

# –§—É–Ω–∫—Ü–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def run_team_simulation():
    selected_agent_names = st.session_state.team_multiselect
    if not selected_agent_names:
        st.toast("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.", icon="warning")
        return
    st.session_state.simulation_log.append("--- –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ ---")
    for name in selected_agent_names:
        agent = next((a for a in st.session_state.agents if a.name == name), None)
        if agent:
            with st.spinner(f"–ê–≥–µ–Ω—Ç {agent.name} –≤ —Ä–∞–±–æ—Ç–µ..."):
                result = agent.simulate_work()
            st.session_state.simulation_log.append(result)
    st.session_state.simulation_log.append("--- –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
    st.toast("üöÄ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", icon="üöÄ")

def clear_log():
    st.session_state.simulation_log = []
    st.toast("üßπ –õ–æ–≥ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—á–∏—â–µ–Ω.", icon="info")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è UI ---
def agent_and_team_manager():
    st.set_page_config(page_title="–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–≥–µ–Ω—Ç–æ–≤", layout="wide")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if "agents" not in st.session_state:
        st.session_state.agents = load_agents_from_db()
    if "simulation_log" not in st.session_state:
        st.session_state.simulation_log = []

    # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞")
        MODELS = ["gemini-1.5-pro", "gemini-1.5-flash", "gpt-4o", "gpt-4-turbo", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768"]
        TOOLS = ["–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python", "–ó–∞–ø—Ä–æ—Å –∫ –ë–î (SQL)", "–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏", "API –ø–æ–≥–æ–¥—ã", "API –∫–∞–ª–µ–Ω–¥–∞—Ä—è", "–û—Ç–ø—Ä–∞–≤–∫–∞ Email"]
        st.text_input("–ò–º—è –∞–≥–µ–Ω—Ç–∞", key="agent_name_input")
        st.text_area("–ü—Ä–æ–º–ø—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)", key="agent_prompt_input", height=150)
        st.selectbox("–ú–æ–¥–µ–ª—å", MODELS, key="agent_model_input")
        st.multiselect("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", TOOLS, key="agent_tools_input")
        st.button("–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", on_click=add_agent, type="primary", use_container_width=True)

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    st.title("ü§ñ –ú–µ–Ω–µ–¥–∂–µ—Ä –ê–≥–µ–Ω—Ç–æ–≤")
    tab1, tab2 = st.tabs(["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞–º–∏", "–°–∏–º—É–ª—è—Ü–∏—è –†–∞–±–æ—Ç—ã"])

    with tab1:
        st.subheader("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        if not st.session_state.agents:
            st.info("–ü–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å —Ñ–æ—Ä–º—ã —Å–ª–µ–≤–∞.", icon="üëà")
        else:
            num_columns = min(len(st.session_state.agents), 3)
            cols = st.columns(num_columns) if num_columns > 0 else [st]
            for i, agent in enumerate(st.session_state.agents):
                with cols[i % num_columns]:
                    with st.container(border=True):
                        st.markdown(f"#### {agent.name}")
                        st.caption(f"–ú–æ–¥–µ–ª—å: {agent.model}")
                        tools_str = ", ".join(agent.tools) if agent.tools else "–ù–µ—Ç"
                        st.caption(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools_str}")
                        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç"):
                            st.text(agent.prompt)
                        st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_{agent.id}", on_click=delete_agent, args=[agent.id], use_container_width=True)

    with tab2:
        # ... (–∫–æ–¥ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
        st.subheader("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã")
        if not st.session_state.agents:
            st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞–º–∏'.")
        else:
            agent_names = [agent.name for agent in st.session_state.agents]
            st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã", options=agent_names, key="team_multiselect")
            col1, col2 = st.columns(2)
            with col1:
                st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", on_click=run_team_simulation, use_container_width=True, type="primary")
            with col2:
                st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", on_click=clear_log, use_container_width=True)
            st.subheader("–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            with st.container(height=400, border=True):
                if not st.session_state.simulation_log:
                    st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤...")
                else:
                    for entry in reversed(st.session_state.simulation_log):
                        st.markdown(entry)
                        st.divider()

# --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
if __name__ == "__main__":
    init_db() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ë–î –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    agent_and_team_manager()
